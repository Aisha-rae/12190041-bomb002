Reading symbols from bomb...
(gdb) b phase_5
Breakpoint 1 at 0x40107b
(gdb) b explode_bomb
Breakpoint 2 at 0x401438
(gdb) disas phase_5
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) x/s 0x4025b7 	//FROM HERE, WE CAN ASSUME THAT THE INPUT DATA TYPE IS INTERGER
0x4025b7:	"%d %d"
Starting program: /home/lab02/Desktop/12190041/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
36 3
So you got that one.  Try this one.
5 3 	//WE ASSUME OR TRY THIS VALUE AS INPUT

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) u *0x00000000004010a1 	
0x00000000004010a1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x00000000004010a1 <+38>:	cmp    $0x1,%eax		//COMPARE VALUE 1 WITH EAX(2)
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
=> 0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48> 	//IF EAX VALUE IS GREATER THAN 1, JUMP TO LINE 48. IF NOT THE EXPLODE_BOMB WILL BE CALLED
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde54      140737488346708
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010a4            0x4010a4 <phase_5+41>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax 	//MOVE VALUE RSP TO EAX
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp) 	//MOVE VALUE EAX(5) TO RSP
=> 0x00000000004010b4 <+57>:	cmp    $0xf,%eax	//COMPARE VALUE 0XF(15) WITH EAX(5) 
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>		//IF IT IS EQUAL, JUMP TO LINE 109 WHERE EXPLODE_BOMB FUNCTION IS CALLED
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0x5                 5
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde54      140737488346708
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010b4            0x4010b4 <phase_5+57>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffde50
0x7fffffffde50:	5
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx 	//MOVE VALUE 0 TO ECX
=> 0x00000000004010be <+67>:	mov    $0x0,%edx	//MOVE VALUE 0 TO EDX
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0x5                 5
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde54      140737488346708
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010be            0x4010be <phase_5+67>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u* 0x00000000004010c8
0x00000000004010c8 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx 	//ADD VALUE 1 TO EDX
   0x00000000004010c6 <+75>:	cltq   
=> 0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax		//0X402440(,%RAX,4) VALUE IN EAX(12)
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) ni
0x00000000004010cf in phase_5 ()
(gdb) i r
rax            0xc                 12
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010cf            0x4010cf <phase_5+84>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx 	//ADD EAX(12) AND ECX(0) VALUE. ECX WILL HAVE VALUE 12
=> 0x00000000004010d1 <+86>:	cmp    $0xf,%eax	//COMPARE VALUE OF 0XF(15) WITH EAX(12)
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72> 		//IF IT IS NOT EQUAL, JUMP TO LINE 72
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xc                 12
rbx            0x4021f0            4202992
rcx            0xc                 12
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010d1            0x4010d1 <phase_5+86>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u*  0x00000000004010d1		//JUMP TO LINE 0x00000000004010d1
0x00000000004010d1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
=> 0x00000000004010d1 <+86>:	cmp    $0xf,%eax 	//COMPARE VALUE 0XF(15) WITH EAX(3)
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0x3                 3
rbx            0x4021f0            4202992
rcx            0xf                 15
rdx            0x2                 2
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010d1            0x4010d1 <phase_5+86>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u* 0x00000000004010d6		//SINCE 3 IS NOT EQUAL TO 15, IT WILL ENTER IN LOOP. SO TO GET THE RIGHT ANSWER, WE WILL JUMP IN LINE 						0X00000000004010d6
0x00000000004010d6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72> 
=> 0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx 		//THE VALUE OF 0xf(15) WILL BE COMPARE WITH EDX(15)
=> 0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109> 	//IF THE VALUE IS NOT EQUAL, WE WILL JUMPED TO LINE 109 WHERE THE 										EXPLODE_BOMB FUNCTION WILL BE CALLED.
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x4021f0            4202992
rcx            0x73                115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010e0            0x4010e0 <phase_5+101>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx		//THE VALUE OF 0x4(%rsp) WILL COMPARE TO ECX(115)
=> 0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>		//IF THE VALUE IS NOT EQUAL IT WILL CALL THE EXPLODE_BOMB FUNCTION
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x4021f0            4202992
rcx            0x73                115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010e6            0x4010e6 <phase_5+107>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
=> 0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb> //THE EXPLODE_BOMB FUNCTION IS CALLED SINCE BOTH THE VALUES ARE NOT EQUAL
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x4021f0            4202992
rcx            0x73                115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x4010e8            0x4010e8 <phase_5+109>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffde54
0x7fffffffde54:	3
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab02/Desktop/12190041/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
36 3
So you got that one.  Try this one.
5 115						//SINCE WE GOT THE VALUE 5 AND 115, LET'S TRY THE VALUE
Breakpoint 3, 0x0000000000401438 in explode_bomb ()
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab02/Desktop/12190041/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
36 3
So you got that one.  Try this one.
5 115			//SINCE IT IS CORRECT, THE BOMB HAS BEEN DEFUSE
Good work!  On to the next...


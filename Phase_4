Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_4
Breakpoint 1 at 0x40100e
(gdb) b explode_bomb
Breakpoint 2 at 0x401438
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi 
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) x/s 0x4025b7
0x4025b7:	"%d %d"                            //INPUT FORMATE,IT ACCEPT "%D,%D"
(gdb) run
Starting program: /home/lab02/Desktop/12190041/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
1 3 //The asumed input that is given is 1 & 3
(gdb) u *0x0000000000401034                      //COMPARE 2 AND %EAX(2)
0x0000000000401034 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000401034 <+38>:	cmp    $0x2,%eax 
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde50      140737488346704
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50 // READ A USER INPUT FROM REVERSE ORDER: X/D 0X7FFFFFFFDE50= 3 AND X/2D0X7FFFFFFFDE50 = 1, 
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x401034            0x401034 <phase_4+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>  //IF IT IS NOT EQUAL,JUMP TO LINE 54 WHERE THE BOMB WILL EXPLODE
=> 0x0000000000401039 <+43>:	mov    (%rsp),%eax    //% RSP (CONTAIN THE SECOND TERM OF USER INPUT) VALUE WILL MOVE TO %EAX
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde50      140737488346704
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x401039            0x401039 <phase_4+43>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) x/d 0x7fffffffde50
0x7fffffffde50:	3     // %RSP CONTAIN VALUE 3 
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax      //THE VALUE 2 IS SUBTRACTED FROM %EAX(3), WHERE THE %EAX WILL STORE 1 AS VALUE
=> 0x000000000040103f <+49>:	cmp    $0x2,%eax      //THE VALUE 2 IS COMPARED WITH EAX(1)
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>      //SINCE 1 IS LESS THEN 2 , IT WILL JUMP TO LINE 59;
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi     // THE VALUE OF (%RSP) IS STORED AT %ESI;
   0x000000000040104c <+62>:	mov    $0x5,%edi	// THE VALUE 5 IS STORED IN %EDI
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x1                 1
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde50      140737488346704
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x40103f            0x40103f <phase_4+49>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax 		//FIRST TERM VALUE IS COMPARED WITH VALUE OF %EAX(36);
=> 0x000000000040105a <+76>:	je     0x401061 <phase_4+83>		//IF THE VALUES ARE EQUAL, FIRST TERM IS BEING FOUND;
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x24                36
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde50      140737488346704
rsi            0x3                 3
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5bac0      140737353464512
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf60      140737488346976
r14            0x0                 0
r15            0x0                 0
rip            0x40105a            0x40105a <phase_4+76>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) x/d  0x7fffffffde50
0x7fffffffde50:	3
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
=> 0x000000000040105c <+78>:	callq  0x401438 <explode_bomb> // SINCE IT IS NOT EQUAL IT WILL EXPLODE THE BOMB BUT WE CAN TRY VALUE 36 AND 3
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab02/Desktop/12190041/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490 
Halfway there!
36 3 	//TRY VALUE 36 AND 3 VALUE

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) delete breakpoint
Delete all breakpoints? (y or n) y
(gdb) b explode_bomb
Breakpoint 3 at 0x401438
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab02/Desktop/12190041/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
36 3
So you got that one.  Try this one.	//IT IS A RIGHT ANSWER, THE BOMB HAS BEEN DEFUSE


